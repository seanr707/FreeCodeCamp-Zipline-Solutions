// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = angular.module('simon', []);

  app.controller('simonSays', [
    '$scope', '$timeout', '$interval', function($scope, $interval, $timeout) {
      var instanceNumber, sound;
      $scope.colors = ['red', 'yellow', 'green', 'blue'];
      $scope.top = $scope.colors.slice(0, 2);
      $scope.bottom = $scope.colors.slice(2, 4);
      $scope.turn = 0;
      $scope.display = '--';
      $scope.playText = "Play";
      $scope.speedTurns = [5, 9, 13];
      $scope.speed = 1500;
      $scope.decrease = 100;
      $scope.order = [];
      $scope.userInput = [];
      $scope.cover = true;
      $scope.win = false;
      $scope.on = false;
      $scope.entered = false;
      instanceNumber = 0;
      sound = function(color) {
        this.elem = document.getElementById(color);
        return this.elem.duration = 0.2;
      };
      $scope.chgDisplay = function(num) {
        if (num === 0) {
          return $scope.display = '--';
        } else if (num === 'error') {
          return $scope.display = '!!';
        } else {
          return $scope.display = parseInt(num);
        }
      };
      $scope.waiting = function(reset, turn) {
        var ref, time, wait;
        time = (ref = 3000 > $scope.speed * $scope.order.length) != null ? ref : {
          3000: $scope.speed * $scope.order.length
        };
        return wait = $timeout(function() {
          if ($scope.userInput.length !== $scope.order.length && !$scope.entered && $scope.on && reset === instanceNumber && turn === $scope.turn) {
            if ($scope.strict) {
              $scope.incorrect($scope.reset());
            } else {
              $scope.incorrect($scope.playList($scope.order));
            }
            $scope.cover = true;
          } else {
            $scope.entered = false;
          }
          return $timeout.cancel(wait);
        }, time);
      };
      $scope.genList = function(order) {
        if (!$scope.on) {
          return;
        }
        order.push($scope.colors[Math.floor(Math.random() * 3.99)]);
        $scope.turn++;
        return $scope.chgDisplay($scope.turn);
      };
      $scope.playList = function(order) {
        var i, wait, winReset;
        if (!$scope.on) {
          return;
        }
        $scope.cover = true;
        i = 0;
        $scope.userInput = [];
        if ($scope.turn === $scope.speedTurns[0]) {
          $scope.speedTurns.shift();
          $scope.speed -= $scope.decrease;
        } else if ($scope.turn > 20) {
          $scope.win = true;
          $scope.on = false;
          winReset = $timeout(function() {
            $scope.on = true;
            $scope.reset();
            return $timeout.cancel(winReset);
          }, 5000);
        }
        return wait = $interval(function() {
          var audio, item, light;
          if (!$scope.on) {
            $interval.cancel(wait);
            return;
          }
          item = order[i];
          audio = new sound(item);
          $('.' + item).addClass('lighten');
          audio.elem.play();
          light = $timeout(function() {
            $timeout.cancel(light);
            return $('.' + item).removeClass('lighten');
          }, 500);
          if (i >= $scope.order.length - 1) {
            $interval.cancel(wait);
            $scope.cover = false;
            return $scope.waiting(instanceNumber, $scope.turn);
          } else {
            return i++;
          }
        }, $scope.speed);
      };
      $scope.incorrect = function(func) {
        var wrong;
        $scope.chgDisplay('error');
        $scope.colors.forEach(function(color) {
          var audio;
          audio = new sound(color);
          return audio.elem.play();
        });
        return wrong = $timeout(function() {
          $scope.chgDisplay($scope.turn);
          func;
          return $timeout.cancel(wrong);
        }, 1000);
      };
      $scope.add = function(color) {
        var audio, wrongFunc;
        if (!$scope.on) {
          return;
        }
        $scope.userInput.push(color);
        audio = new sound(color);
        audio.elem.play();
        wrongFunc = function() {
          if ($scope.strict) {
            return $scope.incorrect($scope.reset());
          } else {
            return $scope.incorrect($scope.playList($scope.order));
          }
        };
        if ($scope.order[$scope.userInput.length - 1] !== $scope.userInput[$scope.userInput.length - 1]) {
          instanceNumber++;
          wrongFunc();
        }
        if ($scope.userInput.length < $scope.order.length) {
          $scope.cover = false;
          return;
        }
        $scope.cover = true;
        $scope.genList($scope.order);
        return $scope.playList($scope.order);
      };
      $scope.reset = function() {
        var wasOn;
        wasOn = $scope.on;
        $scope.on = false;
        $scope.turn = 0;
        $scope.chgDisplay($scope.turn);
        $scope.order = [];
        $scope.userInput = [];
        $scope.win = false;
        instanceNumber++;
        if (wasOn) {
          $scope.on = true;
          $scope.genList($scope.order);
          return $scope.playList($scope.order);
        }
      };
      return $scope.play = function() {
        if (!$scope.on) {
          if ($scope.strict) {
            $scope.reset();
          }
          $scope.on = true;
          $scope.playText = "Pause";
          if ($scope.turn === 0) {
            $scope.genList($scope.order);
          }
          return $scope.playList($scope.order);
        } else {
          $scope.on = false;
          if ($scope.strict) {
            $scope.reset();
          }
          $scope.cover = true;
          return $scope.playText = "Play";
        }
      };
    }
  ]);

}).call(this);
